openapi: 3.0.0
info:
    title: Task Manager API
    version: 1.0.0
    description: A REST API for managing users and their tasks, built with a professional, decoupled architecture.
    contact:
        name: HoneyVanya

servers:
    - url: /
      description: Current server

# This is where we define reusable pieces of our documentation
components:
    # This section defines our security schemes.
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: Enter your Access Token in the format 'Bearer {token}'

    # This section defines reusable data models (schemas).
    schemas:
        User:
            type: object
            properties:
                id:
                    type: string
                    format: cuid
                    example: 'clw...'
                email:
                    type: string
                    format: email
                username:
                    type: string
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time
        Task:
            type: object
            properties:
                id:
                    type: string
                    format: cuid
                title:
                    type: string
                completed:
                    type: boolean
                authorId:
                    type: string
                    format: cuid
                createdAt:
                    type: string
                    format: date-time
                updatedAt:
                    type: string
                    format: date-time
        Error:
            type: object
            properties:
                message:
                    type: string

# This defines a global security requirement for endpoints that need it.
security:
    - bearerAuth: []

# We group our endpoints into logical categories.
tags:
    - name: Auth
      description: Authentication and user session management
    - name: Users
      description: User registration and management
    - name: Tasks
      description: Operations that require a logged-in user

paths:
    # --- AUTH ENDPOINTS ---
    /auth/login:
        post:
            tags: [Auth]
            summary: Login a user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [email, password]
                            properties:
                                email: { type: string, format: email }
                                password: { type: string, format: password }
            responses:
                '200':
                    description: Login successful. Returns access and refresh tokens.
                '401':
                    description: Invalid credentials.
    /auth/refresh:
        post:
            tags: [Auth]
            summary: Get a new access token using a refresh token
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                refreshToken: { type: string }
            responses:
                '200':
                    description: New tokens generated successfully.
                '401':
                    description: Invalid or expired refresh token.
    /auth/logout:
        post:
            tags: [Auth]
            summary: Logout the user (revokes the refresh token)
            security:
                - bearerAuth: [] # Explicitly state that this endpoint is protected
            responses:
                '200':
                    description: Logout successful.
    /auth/google:
        get:
            tags: [Auth]
            summary: Initiate Google OAuth2 login flow
            description: This will redirect the user to Google's authentication page.
            responses:
                '302':
                    description: Redirect to Google.

    # --- USERS ENDPOINTS ---
    /users:
        post:
            tags: [Users]
            summary: Register a new user
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                [email, username, password, recaptchaToken]
                            properties:
                                email: { type: string, format: email }
                                username: { type: string, minLength: 3 }
                                password: { type: string, minLength: 6 }
                                recaptchaToken: { type: string }
            responses:
                '201':
                    description: User registered and logged in successfully.
                '400':
                    description: Validation error (e.g., password too short).
        get:
            tags: [Users]
            summary: Get a list of all users
            responses:
                '200':
                    description: A list of public user data.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'

    # --- TASKS ENDPOINTS ---
    /tasks:
        get:
            tags: [Tasks]
            summary: Get all tasks for the logged-in user
            security:
                - bearerAuth: []
            responses:
                '200':
                    description: A list of the user's tasks.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Task'
                '401':
                    description: Unauthorized (missing or invalid token).
        post:
            tags: [Tasks]
            summary: Create a new task
            security:
                - bearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required: [title]
                            properties:
                                title: { type: string }
            responses:
                '201':
                    description: Task created successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Task'
    /tasks/{id}:
        put:
            tags: [Tasks]
            summary: Update a task by its ID
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      format: cuid
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                title: { type: string }
                                completed: { type: boolean }
            responses:
                '200':
                    description: The updated task.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Task'
        delete:
            tags: [Tasks]
            summary: Delete a task by its ID
            security:
                - bearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                      type: string
                      format: cuid
            responses:
                '204':
                    description: Task deleted successfully.
